* Code (general Julia)
** TODO Check arguments order in functions
** TODO Read "Eval of julia code"
** Fields in Arrays [1/1]
   - [X] element-wise change is not possible for arrays nor dict of mutable structs: ONLY POSSIBLE IF STRUCTS ARE BUILT INDIVIDUALLY: NO FILL!!
** TODO check necessity new() in structs 

* main.jl
*** TODO test *simulate()* for reading and creating initial conditions
** Unity tests

* Fileprep.jl
** DONE *lengthstocell()* and *areatocell* convert/calculates real fragment sizes to grid cell side lengths <2018-03-02 Fr>
** TODO *out_landscape()* prepare output that characterize output for both unity tests and visualization

* Setworld.jl
*** DONE Create multi fragment landscape structure (not simulated yet) 
*** DONE Whole fragment is getting the same temperature and preciptation
    - [X] because assignment of one field changes all the fields of the array!
*** DONE Change names so that temperature and preciptation can be called niche dimensions: no need
*** TODO Initialize
    DEADLINE: <2018-03-02 Fr>
*readinlandscp* Initial landscape conditions are read from *landscpinit* file and stored in Dict: so far, *read_initials()* is doing it
*landscape_init()* create landscape with WHICH DIMENSIONS?
- Reshaping in landscape should use max fragment dimensions? For square fragments, easy, but if shape varies, it is problematic.
- Find another type of structure to hold the landscape structure OR use a 1D array, and elaborate an indexation to identify x,y and frag? 
  -> Inside the fragments loop, reshape each fragment and append it to some 3D structure?
*** Change during simulation
DEADLINE: <2018-03-02 Fr>
*update_landscape!* changes the dictionnary values
*** TODO create landscapes wiht n_frags > 1

* Organisms.jl
Initialization spreads organisms in the landscape (fragments, later): newOrg() is called
During simulation, after reproduction (and dispersion?) new organisms will only establish once it has checked local grid viability and fitness values?
** mutable struct [0/3]
- [ ] Genotype must control some traits
- [ ] Genotype defines species
- [ ] Traits should matching for interaction to happen. Evolutionary change would cause traits to (mis)match (Beyond species Poisot)
- [ ] Biomass is a dictionary with compartments that get the allocations (Surv, Veg(growth), Reprod)
** TODO should IDcount remain global and count the total number of individuals, or should count each type of funcitonal group? Containers for individuals of each group can already do it, so having a counter for each might not be necessary 
** TODO think this organism definition through: how broad is it going to be?
** Implementation of single species model
*** Single species [3/3] 				     :initialization:
Organisms are stored in an array of n_frags (read from simulation file). All organisms are stored in this array and are updated together (each fragment - it could be possible to have simulations where there is some desynchronization between fragments!).
*newOrg()* will have multiple methods: One for initialization, where individuals always establish and another where it depends on the individuals fitness in the grid and establishment!() is called.  
*** Initialize a certain number of organism [3/3]
  - [X] get fct types and abundances from input file
  - [X] create orgs somewhere ('organisms' Array)
  - [X] properly index individuals in the WordCell landscape
    - [X] create bunch of locations and draw from them <2018-02-21 Mi>
    - [X] all cells get the same quantity (init_abund) of organisms, the locations are rdm, though. The loop inside XYs is causing it. --> because the *landscape.orgs* field was initialized with empty orgs, *push!()* would add the same orgs to  all the cells! Individuals are now stored in *orgs* array, instead. Even ig that is not the real problem, it makes indexation easier <2018-02-22 Do>
    - [X] create different arrays for different fct groups: <2018-02-23 Fr> For now, not necessary, as functional group should be available as field of orgs array.
- [X] correct IDcounter: global in Organisms module, exported and called in newOrgs!()
- [X] check ERROR with method on function newOrgs(): why push! nao funciona? Because all arry's contents had been initialized at the same time <2018-02-26 Mo>.
*** Compete [1/5]
- [ ] Vegetative biomass (=(1- *reprod*) x biomass) is projected to calculate competition
- [ ] The landscape cell has a maximum biomass of each *fgroup* it can sustain. If that max is attained, the organism in question DOES WHAT? HOW IT CAN BE PENALIZED?
- [ ] HOW CAN THIS BE MADE REALISTIC?????
- [X] Initialize a 'competition landscape' for the plants: *.neighs* field in the landscape holds a dictionnary with sum of biomass projected by each individual
- [ ] Competition = growth rate is penalized by superpositioning of 
  - During initialization, one input file gives the functional types and their initial abundances, vegmass, reprodmass
NOTES:
*** Allocation [1/2]
Parameters values might be specific to each functional group, but general mechanism must be the same:
*REFERENCES*:
-Irlich et al. 2009: Why MTE doenst fit for insect
- Wenk & Falster 2015:Reproductive allocation schedules in plants -> Find something similar for insects
- Janczur: Good model of allocation (general)
- Wei√ü & Jeltsch 2015: ZOI
- Weiner et al. 2001: Plant growth
- Lin et al. J of Ecol. 2012: MTE for plants and interaction
- Nestel et al. J Insect Physiol. 2016: Resource allocation in insects
- Boggs Func. Ecol. 2009: Review 
- For insects, nutrient allocation is a function of AGE & SEX (Boggs Func. Ecol. 2009)
    DEADLINE: <2018-03-02 Fr>
- [X] Divide biomass GAIN according to allocation to survival, growth and reproduction. The allocation will depend on the stage:
  - [X] *allocation()* sorts things into the *biomass Dictionnary*
  - [X] *allocation()* disentangled from *survive!()*, which is based on whole bady mass:
    The MTE is based on dry weights, which means that underlying energetic budget doesn't need to be taking into account if the most important functions in the model (growth and reprodction), can be modelled via the biomass allocated to those structures. Other life-history traits, such as survival, will depend on the resulting total biomass. *Resistance structures are NOT being taken into account*, any accumulatiion of biomass should reflect in the factmass dependent survival function. 
  - juvenile: gain goes to growth
  - adult: gain goes to reproduction during reproductive phase
  For _embryos_:
  Only consume biomass
  For _juveniles_:
  *growth*
  For _adults_:
  *growth* = (1-surv)
  *reprod* = (1-surv) -> Only exists during reproductive season, controlled by *age* and *fgroup* (gives the duration of reproductive season)
- [ ] Biomass GAIN depends on competition
*** Update organisms: [0/2]
 - [ ] Simultaneous or independent update?
 - [ ] Consider making a mutable struct where each field stores the individuals of a functional group, therefore, when updating the organisms, I wouldn't have to go through all of them, just through the group affected by the function in question
***  Make them grow [0/0]
- [ ] Calculate 
*** TODO Create organisms of different functional groups
*** TODO Think about how to store multiple types of organisms: Dictionnaries, high dim arry, mutable structures?
- Eventhough they are more rigid, structs are easier to call and the fields have more flexibility to store different kinds of information on the functional group parameters 
*** TODO Consider creating unmutable structs to store info about funcitonal types, instead of tables?
***  Decide on newOrgs!() is called between reproduction and establishment: Are new individuals created right after reproduction?
*** TODO Adjust initial abundance to realistic observed densities

** Establishment
** Growth [/]
- [ ] check MTE units
** Reproduction [0/1]
 - [ ] How to "measure" reproductive investment? How to account for it as a field of Organism()? Floral mass might be useful for plants, but not for heterotrophs
** Interactions
*** TODO Interactions modelled "by" the *outcomes* (Tikhonov et al. 2017, Spiesman & Inouye 2014) 8[0/1]
 - [ ] Is it possible to integrate interaction outcomes and MTE? The patterns would lead to enregy flux across community levels
** Evolutionary dynamics
Juliano's suggestion: Create a function of trait distribution change depending on abundance or temperature, so that the time 
* Observation model
*Different from Virtual Ecologist approach* : OM always exists, VE verifies parametrization algorithm and data sampling method
* DOCUMENTATION
*** TODO Update TRACE
