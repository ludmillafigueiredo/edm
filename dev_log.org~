* Code (general)
** TODO Check arguments order in functions
** TODO Read "Eval of julia code"
** Fields in Arrays [0/1]
   - [ ] element-wise change is not possible for arrays nor dict of mutable structs: ONLY POSSIBLE IF STRUCTS ARE BUILT INDIVIDUALLY: NO FILL!!
* World
*** DONE Create multi fragment landscape 
*** DONE Whole fragment is getting the same temperature and preciptation
    - [X] because assignment of one field changes all the fields of the array!
*** TODO Change names so that temperature and preciptation can be called niche dimensions
*** TODO work on updatelandscape!()

* Organisms
Initialization spreads organisms in the landscape (fragments, later): newOrg() is called
During simulation, after reproduction (and dispersion?) new organisms will only establish once it has checked local grid viability and fitness values?
** mutable struct [0/3]
- [ ] Genotype must control some traits
- [ ] Genotype defines species
- [ ] Traits should matching for interaction to happen. Evolutionary change would cause traits to (mis)match (Beyond species Poisot)
** TODO should IDcount remain global and count the total number of individuals, or should count each type of funcitonal group? Containers for individuals of each group can already do it, so having a counter for each might not be necessary 
** TODO think this organism definition through: how broad is it going to be?
** Implementation of single species model
*** Introduce new organism [2/2] 			     :initialization:
Organisms are stored in an array of n_frags (read from simulation file). All orgnisms are sotre in this array and are updated together (each fragment - it could be possible to have simulations where there is some desynchronization between fragments!).
*newOrg()* will have multiple methods: One for initialization, where individuals always establish and another where it depends on the individuals fitness in the grid and establishment!() is called.  
- [ ] Initialize a certain number of organissm
   - [X] get fct types and abundances from input file
   - [X] create orgs somewhere ('organisms' Array)
   - [X] properly index individuals in the WordCell landscape
     - [X] create bunch of locations and draw from them <2018-02-21 Mi>
     - [X] all cells get the same quantity (init_abund) of organisms, the locations are rdm, though. The loop inside XYs is causing it. --> because the *landscape.orgs* field was initialized with empty orgs, *push!()* would add the same orgs to  all the cells! Individuals are now stored in *orgs* array, instead. Even ig that is not the real problem, it makes indexation easier <2018-02-22 Do>
     - [X] create different arrays for different fct groups: <2018-02-23 Fr> For now, not necessary, as functional group should be available as field of orgs array.
- [X] correct IDcounter: global in Organisms module, exported and called in newOrgs!()
- [X] check ERROR with method on function newOrgs(): why push! nao funciona? Because all arry's contents had been initialized at the same time.
*** Update organisms: [0/2]
- [ ] Simultaneous or independent update?
- [ ] Consider making a mutable struct where each field stores the individuals of a functional group, therefore, when updating the organisms, I wouldn't have to go through all of them, just through the group affected by the function in question
*** Allocation:
Parameters values might be specific to each functional group, but general mechanism must be the same:
REFERENCES:
-Irlich et al. 2009: Why MTE doenst fit for insect
- Wenk & Falster 2015:Reproductive allocation schedules in plants -> Find something similar for insects
- Janczur: Good model of allocation (general)
- Wei√ü & Jeltsch 2015: ZOI
- Weiner et al. 2001: Plant growth
- Lin et al. J of Ecol. 2012: MTE for plants and interaction
- Nestel et al. J Insect Physiol. 2016: Resource allocation in insects
- Boggs Func. Ecol. 2009: 
    DEADLINE: <2018-02-28 Mi>
- [ ] Divide biomass GAIN according to allocation to survival, growth and reproduction. The allocation will depend on the stage:
*REFERENCE:* For insects, nutrient allocation is a function of AGE & SEX (Boggs Func. Ecol. 2009)
  1. juvenile: gain goes to growth
  2. adult: gain goes to reproduction during reproductive phase
- [ ] A fixed proportion of the total weight(biomass) dedicated to survival (*.surv*, for all stages.
  For _adults_:
  *surv* = ???
  *growth* = (1-surv)
  *reprod* = (1-surv) -> Only exists during reproductive season, controlled by *age* and *fgroup* (gives the duration of reproductive season)
- [ ] Biomass GAIN depends on competition
*** Compete [1/2]
- [ ] Vegetative biomass (=(1- *reprod*) x biomass) is projected to calculate competition
- [ ] The landscape cell has a maximum biomass of each *fgroup* it can sustain. If that max is attained, the organism in question DOES WHAT? HOW IT CAN BE PENALIZED?
- [ ] HOW CAN THIS BE MADE REALISTIC?????
- [X] Initialize a 'competition landscape' for the plants: *.neighs* field in the landscape holds a dictionnary with sum of biomass projected by each individual
- [ ] Competition = growth rate is penalized by superpositioning of 
  - During initialization, one input file gives the functional types and their initial abundances, vegmass, reprodmass
NOTES:
***  Make them grow [0/0]
- [ ] Calculate 
*** Create organisms of different functional groups [0/0]
*** TODO Think about how to store multiple types of organisms: Dictionnaries, high dim arry, mutable structures?
- [ ] *populate()* calls *newOrgs()* to create new individuals inside the landscape.
- [ ] 
*** TODO Consider creating unmutable structs to store info about funcitonal types, instead of tables?
***  Decide on newOrgs!() is called between reproduction and establishment: Are new individuals created right after reproduction?
*** TODO Adjust initial abundance to realistic observed densities

** Establishment
** Growth
** Reproduction [0/1]
 - [ ] How to "measure" reproductive investment? How to account for it as a field of Organism()? Floral mass might be useful for plants, but not for heterotrophs
** DOCUMENTATION
*** TODO list object variables in the calc sheet
